This file holds a simple but well-explained documentation of the Interrupt Interface Driver.
Interrupt Interface Driver consists of functions and definitions that will be discussed in here.

Interrupt Interface Driver is used to configure External Interrupts and Global Interrupts.

________________________________________________________________________________________________________

Usage:-
- User must only include Interrupt.h
- Then, user can use functions illustrated below to preform needed tasks.
- For each function, user is responsible for suplying correct arguments.
- Although functions check validity of parameters, some parameters may seem valid, but are incorrect.
- Each function is provided with a return value for invalid arguments which may be used for debugging.
________________________________________________________________________________________________________

Dependencies:
- Std_Types.h
- Interrupt_Handler.h
- Atmega32.h
_________________________________________________________________________________________________________

Driver Functionality:
- Global Interrupt 		Enable/Disable
- External Interrupts 	Enable/Disable
- Interrupt Trigger Configure
- Interrupt Flag Clear
_________________________________________________________________________________________________________

Error Return Values:-
- 0xFF/0xFFF	:		Indicates Input Error
- 0xFE/0xFFE	:		indicates inequivalente direction and used function
- 0x00			:		indicates No error
Note: These values aren't absoulte, you should see functions description below.
_________________________________________________________________________________________________________
_________________________________________________________________________________________________________
_________________________________________________________________________________________________________
_________________________________________________________________________________________________________

Global Interrupt:-

- uint8_t Global_Interrupt_Configure(uint8_t State);
	Enable/Disable Global Interrupts.
	
	Parameters:
		- uint8_t State: either Enable(0) or Disable(1);
		
	Return:
		- 0xFF: Input error
		- 0x00: No error 
_________________________________________________________________________________________________________

External Interrupt:-

- uint8_t External_Interrupt_Configure(uint8_t INT, uint8_t State);
	Set/Reset an external interrupt
	
	Parameters:
		- INT: 		Interrupt Number (From ATmega32.h file)
		- State: 	Enable/Disable
	
	Return:
		- 0xFF: Input error
		- 0x00: No error
	________________________________________________________________________________

- uint8_t Interrupt_Trigger_Configure(uint8_t INT, uint8_t Trigger);
	Configure what will trigger external interrupts
	
		Parameters:
		- INT: 		Interrupt Number (From ATmega32.h file)
		- trigger:	Low_Level - Logical_Change - Falling_Edge - Rising_Edge (From ATmega32.h file)
		
	Return:
		- 0xFF: Input error
		- 0x00: No error
	________________________________________________________________________________

- uint8_t Interrupt_Flag_Clear(uint8_t INT);
	Clear external interrupt flag
	
	Parameters:
		- INT: Interrupt Number (From ATmega32.h file)
		
	Return:
		- 0xFF: Input error
		- 0x00: No error
	________________________________________________________________________________
	
Example Code:-
		Global_Interrupt_Configure(Enable);	//Give permission to all Interrupts to execute ISR
		External_Interrupt_Configure(INT0, Enable);	//Enable Interrupt 0
		Interrupt_Trigger_Configure(INT0, Falling_Edge);	//Set Trigger of INT0 as Falling_Edge
		
		//Next line in ISR() for example
		Interrupt_Flag_Clear(INT0);	//Reset Flag for next Interrupt event

_________________________________________________________________________________________________________
 